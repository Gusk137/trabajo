using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace trabajo_practico
{
    class Program //es el program pibe
    {
        public static void Main(string[] args)
        {
            menu();
            Console.ReadKey(true);
        }
        static void menu()
        {
            el_cliente cosa_cliente = new el_cliente();
            telefonia cosa_telefonia = new telefonia();
            tecnico cosa_tecnico = new tecnico();
            combos cosa_combos = new combos();
            int valor;
            do
            {
                Console.WriteLine("-------------------------------");
                Console.WriteLine("Presione 1 para agregar cliente ");
                Console.WriteLine("Presione 2 para Modificar la cantidad de minutos consumidos por un cliente dado");
                Console.WriteLine("Presione 3 para Eliminar cliente de la empresa.");
                Console.WriteLine("Presione 4 para Dada un área determinada imprimir el nombre de los técnicos asignados a la misma");
                Console.WriteLine("Presione 5 para Listado de clientes");
                Console.WriteLine("Presione 6 para Agregar técnico");
                Console.WriteLine("Presione 7 para Imprimir la facturación de cada cliente en base a su plan");
                Console.WriteLine("Presione 8 para Listado de técnicos");
                Console.WriteLine("Presione 9 para salir");
                Console.WriteLine("-------------------------------");
                valor=int.Parse(Console.ReadLine());
                switch(valor)
                {
                    case 1:
                    cosa_cliente.nuevo_cliente(); //hace el nuevo cliente y luego invoca a otro metodo el cual pasa la informacion a telefonia 
                    //cosa_cliente.pasar_combo(); 
                    break;

                    case 2:
                    cosa_telefonia.modificar(); //modificar minutos consumidos y esta relacionado con la oferta
                    break;

                    case 3:
                    cosa_telefonia.eliminar(); //eliminar cliente
                    break;

                    case 4:
                    cosa_tecnico.mostrar_tec_area(); //lista de tecnicos que hay en un area 
                    break;

                    case 5:
                    cosa_telefonia.mostrar_clientes();
                    break;

                    case 6:
                    cosa_tecnico.nuevo_tecnico();
                    break;

                    case 7:
                    cosa_telefonia.facturación_cliente();
                    break;

                    case 8:
                    Console.WriteLine(cosa_telefonia.tecnicoso_lista()); //un metodo que muestre el nombre del tecnico y la zona que opera
                    break;

                    case 9:
                    Console.WriteLine("saliendo del sistema...");
                    Console.Threading(2000)
                    break;

                    default:
                    Console.WriteLine("La opcion ingresada es inexistente, por favor trate de nuevo:");
                    break;
                }
            }
            while(valor != 9);
        }
    }
    public class el_cliente //clase cliente terminada :3
    {
        //atributos
        private string nombre; //posicion 0
        private string apellido; //posicion 1
        private int DNI; //posicion 2
        private DateTime dia_inscripcion; //posicion 3
        private string plan_elegido; //posicion 4
        private string area_reside; //posicion 5
        private int numero_cliente = 0; //posicion 6
        private double fact = 0; //posicion 7

        //metodos
        public void nuevo_cliente() //modifica las variables
        { 
            Console.WriteLine("ingrese su nombre: "); //posicion 0
            nombre = Console.ReadLine();

            Console.WriteLine("ingrese su apellido: "); //posicion 1
            apellido = Console.ReadLine();

            Console.WriteLine("ingrese su DNI: "); //posicion 2
            DNI = Console.ReadLine();

            dia_inscripcion = DateTime.Now; //posicion 3
            
            Console.WriteLine("ingrese el plan que desea: "); //posicion 4
            plan_elegido = Console.ReadLine();

            Console.WriteLine("ingrese el area en el que reside teniendo en cuenta lo siguiente: "); //posicion 5
            Console.WriteLine("1-Florencio Varela");
            Console.WriteLine("2-Berazategi");
            Console.WriteLine("3-Quilmes");
            Console.WriteLine("4-Miamiiiii");
            int a = Console.ReadLine();
            if (a == 1) {area_reside = "Florencio varela"}
            if (a == 2) {area_reside = "Berazategi"}
            if (a == 3) {area_reside = "Quilmes"}
            if (a == 4) {area_reside = "Miamiiiii"}
            else
            {
                Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                a = Console.ReadLine();
            }

            numero_cliente++; //posicion 6
            Console.WriteLine("su numero de cliente sera: {0}",numero_cliente);

            un_cliente.Add(fact); //posicion 7
        }
        public void pasar_cliente_a_combos() //le pasa las variables a combo
        {
            combos algito = new combos(nombre,apellido,DNI,dia_inscripcion,plan_elegido,area_reside,numero_cliente,fact);
            algito.verificar_combo(); 
            algito.pasar_tele();
        }
    }
    public class tecnico //clase tecnico terminada :3
    {
        //atributos
        private string nomb;
        private string apelli;
        private string area_trabaja;

        //metodos
        public void nuevo_tecnico()
        {
     	    Console.WriteLine("ingrese su nombre: "); //posicion 0
     	    nomb = Console.ReadLine();

     	    Console.WriteLine("ingrese su apellido: "); //posicion 1
     	    apelli = Console.ReadLine();

     	    Console.WriteLine("ingrese su area a trabajar teniendo en cuenta lo siguiente:"); //posicion 2
            Console.WriteLine("1-Florencio Varela");
            Console.WriteLine("2-Berazategi");
            Console.WriteLine("3-Quilmes");
            Console.WriteLine("4-Miamiiiii");
            int b = Console.ReadLine();
            if (b == 1) {area_trabaja = "Florencio varela"}
            if (b == 2) {area_trabaja = "Berazategi"}
            if (b == 3) {area_trabaja = "Quilmes"}
            if (b == 4) {area_trabaja = "Miamiiiii"}
            else
            {
                Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                b = Console.ReadLine();
            }
        }
        public void pasar_tecnico_a_telefonia()
        {
            telefonia cosa_telefonia1 = new telefonia(nomb,apelli,area_trabaja);
            cosa_telefonia1.agregar_tecnico();
        }
    }
    public class combos //clase combo terminada :3
    {
        //atributos de la clase combo
        private DateTime oferta_tiempo = new DateTime(2022/12/31); //fecha limite de la oferta
        protected int cupos_maximos = 120;
        protected int cupos_ocupados = 0;

        //atributos del cliente
        private string nom; //el constructor les asigna su valor
        private string ape; //el constructor les asigna su valor
        private int dni; //el constructor les asigna su valor
        private DateTime inscri;  //el constructor les asigna su valor
        private string plan; //el constructor les asigna su valor
        private string are; //el constructor les asigna su valor
        private int num; //el constructor les asigna su valor
        private double factu; //el constructor les asigna su valor

        //atributos del "combo"
        private int minutos_libre;
        private double costo_minutos;
        private double precio_final;

        //constructor
        public combos (){} //por si meten un coso vacio, los estoy viendo eh
        public combos(string nom, string ape, int dni, DateTime inscri, string plan, string are, int num, double factu)
        {
            this.nom = nom
            this.ape = ape
            this.dni = dni
            this.inscri = inscri
            this.plan = plan
            this.are = are
            this.num = num
            this.factu = factu
        }
        
        //propiedades (get y set) 
        public string Nombre
        {
            set
            {
                nom = value;
            }
            get
            {
                return nom;
            }
        }
        public string Apellido
        {
            set
            {
                ape = value;
            }
            get
            {
                return ape;
            }
        }
        public string Dni
        {
            set
            {
                dni = value;
            }
            get
            {
                return dni;
            }
        }
        public string Dia_Inscripcion
        {
            set
            {
                inscri = value;
            }
            get
            {
                return inscri;
            }
        }
        public string Plan_ele
        {
            set
            {
                plan = value;
            }
            get
            {
                return plan;
            }
        }
        public string Area
        {
            set
            {
                are = value;
            }
            get
            {
                return are;
            }
        }
        public string Numero_cli
        {
            set
            {
                num = value;
            }
            get
            {
                return num;
            }
        }
        public string Facturacion
        {
            set
            {
                factu = value;
            }
            get
            {
                return factu;
            }
        }

        //metodos
        public void verificar_combo()
        {
            if (plan == 1)
            {
                combo1();
            }
            if (plan == 2)
            {
                combo2();
            }
            if (plan == 3)
            {
                combo3();
            }
            if (plan == 4)
            {
                combo4();
            }
        }
        protected void promocion()
        {
            if (inscri < oferta_tiempo)
            {
                if (cupos_ocupados < cupos_maximos) // aca hacemos el try y el catch y despues el hacemos el throw de "cupos insufisientes"
                {
                    Console.WriteLine("usted cumple con los requisitos recibir el pack futbol y el de Disney ademas del combo sin un cargo adicional, felicidades!");
                }
            }
            else //si ninguna de las dos condiciones se cumplen hay que preguntar si quiere suscribirse igual
            {
                string confirmacion;
                Console.WriteLine("usted no cumple con los requisitos recibir el pack futbol y el de Disney.");
                Console.WriteLine("¿quiere suscribirse a este combo de todas formas? Ponga si o no respectivamente: ");
                confirmacion = Console.ReadLine();
                if (confirmacion == "si")
                {
                    Console.WriteLine("usted se anoto en el combo, felicidades!") //que miseria
                }
                if (confirmacion == "no")
                {
                    Console.WriteLine("a mamarla") //que quere que haga pibe
                }
                else
                {
                    Console.WriteLine("la palabra ingresada no corresponde, por favor intente de nuevo: "); //tremendo dolape
                    confirmacion = Console.ReadLine();
                }
            }
        }
        public void oferta(double consumido_pasador_por_cliente) // la oferta se hace cuando se modifican los minutos consumidos
        {
            if (consumido_pasador_por_cliente < libres*0.15)
            {
                factu = factu * 0.85;
                Console.WriteLine("su precio con el descuento es {0}",precio_final);
            }
        }
        public void combo1() 
        {
            //asignacion
            minutos_libre=150;
            costo_minutos=5;
            factu = minutos_libre * costo_minutos;
            promocion();
        }
        public void combo2() 
        {
            //asignacion
            minutos_libre=300;
            costo_minutos=4;
            factu = minutos_libre * costo_minutos;
            promocion();
        }
        public void combo3() 
        {
            //asignacion
            minutos_libre=150;
            costo_minutos=3; 
            factu = minutos_libre * costo_minutos;
            promocion();
        }
        public void combo4() 
        {
            //asignacion
            minutos_libre=500;
            costo_minutos=2; 
            factu = minutos_libre * costo_minutos;
            promocion();
        }
        public void pasar_tele()
        {
            telefonia cosa_telefonia1 = new telefonia(nom,ape,dni,inscri,plan,are,num,factu);
            cosa_telefonia1.agregar_cliente(); //metodo que busca en la lista de tecnicos al primero que concuerde con el area del cliente y se lo asigna
            cosa_telefonia1.agregar_cliente(); //agregar al cliente junto a su tecnico asignado a la lista de clientes
        }
    }
    public class telefonia //faltan los metodos >:c
    {
        //atributos de telefonia
        private ArrayList clientes = new ArrayList();
        private ArrayList tecnicos = new ArrayList();
        
        //atributos para manejar la informacion
        private ArrayList un_cliente = new Arraylist();
        private ArrayList un_tecnico = new Arraylist();

        //atributos del tecnico
        private string nombre_tecnico;
        private string apellido_tecnico;
        private string area_tecnico;

        //atributos del cliente
        private string nombre_cliente;
        private string apellido_cliente;
        private int dni_cliente;
        private DateTime inscripcion_cliente;
        private string plan_cliente;
        private string area_cliente;
        private int numero_cliente;
        private double facturacion_cliente;

        //constructores
        public telefonia(){} //por si hacen algo vacio, los estoy viendo
        public telefonia(string tec_nom, string tec_ape, string tec_are) //este constructor es para recibir al tecnico
        {
            this.nombre_tecnico = tec_nom;
            this.apellido_tecnico = tec_ape;
            this.area_tecnico = tec_area;
        }
        public telefonia((string cli_nom,string cli_ape,int cli_dni, DateTime cli_ins, string cli_pla,string cli_are,int cli_num,double cli_fac);) //este constructor es para recibir al cliente que viene de combo, jaja re loco
        {
            this.nombre_cliente = cli_nom;
            this.apellido_cliente = cli_ape;
            this.dni_cliente = cli_dni;
            this.inscripcion_cliente = cli_ins;
            this.plan_cliente = cli_pla;
            this.area_cliente = cli_are;
            this.numero_cliente = cli_num;
            this.facturacion_cliente = cli_fac;
        }

        //propiedades (get y set de tecnico)
        public string Nombre_tecnico
        {
            set
            {
                nombre_tecnico = value;
            }
            get
            {
                return nombre_tecnico;
            }
        }
        public string Apellido_tecnico
        {
            set
            {
                apellido_tecnico = value;
            }
            get
            {
                return apellido_tecnico;
            }
        }
        public string area_tecnico
        {
            set
            {
                area_tecnico = value;
            }
            get
            {
                return area_tecnico;
            }
        }

        //propiedades (get y set de cliente)
        public string Nombre_cliente
        {
            set
            {
                nombre_cliente = value;
            }
            get
            {
                return nombre_cliente;
            }
        }
        public string Apellido_cliente
        {
            set
            {
                apellido_cliente = value;
            }
            get
            {
                return apellido_cliente;
            }
        }
        public string Dni_cliente
        {
            set
            {
                dni_cliente = value;
            }
            get
            {
                return dni_cliente;
            }
        }
        public string Inscripcion_cliente
        {
            set
            {
                inscripcion_cliente = value;
            }
            get
            {
                return inscripcion_cliente;
            }
        }
        public string Plan_cliente
        {
            set
            {
                plan_cliente = value;
            }
            get
            {
                return plan_cliente;
            }
        }
        public string Area_cliente
        {
            set
            {
                area_cliente = value;
            }
            get
            {
                return area_cliente;
            }
        }
        public string Numero_cliente
        {
            set
            {
                numero_cliente = value;
            }
            get
            {
                return numero_cliente;
            }
        }
        public string _cliente
        {
            set
            {
                facturacion_cliente = value;
            }
            get
            {
                return facturacion_cliente;
            }
        }

        //metodos
        public void agregar_cliente()
        {
            un_cliente.add(nombre_cliente); //posicion 0
            un_cliente.add(apellido_cliente); //posicion 1
            un_cliente.add(dni_cliente); //posicion 2
            un_cliente.add(inscripcion_cliente); //posicion 3
            un_cliente.add(area_cliente); //posicion 4
            un_cliente.add(Plan_cliente); //posicion 5
            un_cliente.add(numero_cliente); //posicion 6
            un_cliente.add(facturacion_cliente); //posicion 7
            clientes.add(un_cliente); //es hermoso 
            un_cliente.Clear();
        }
        public void agregar_tecnico()
        {
            un_tecnico.add(nombre_tecnico); //posicion 0
            un_tecnico.add(nombre_tecnico);//posicion 1
            un_tecnico.add(nombre_tecnico); //posicion 2
            tecnicos.add(un_tecnico); //es hermoso
            un_tecnico.Clear()
        }
        public void asignar_tecnico(){}
        public void facturacion(){}
        public void cambiar_minutos_consumidos(){}
        public void listaClientes(){}
        public void listaTecnicos(){}
        public void listaTecnicosArea(){}
        public void eliminar_cliente(){}
    }
}
