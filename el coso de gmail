using System;
using System.Collections;
using System.Runtime;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
 
namespace trabajo_practico
{class Program //es el program pibe
    {public static void Main(string[] args)
        {menu();
            Console.ReadKey(true);
        }
    public static void menu()
    {         
        telefonia cosa_telefonia = new telefonia();
        //tecnico cosa_tecnico = new tecnico();
        combos cosa_combos = new combos();
        int valor;
        do
        {Console.WriteLine("-------------------------------");
        Console.WriteLine("Presione 1 para agregar cliente ");
        Console.WriteLine("Presione 2 para Modificar la cantidad de minutos consumidos por un cliente dado");
        Console.WriteLine("Presione 3 para Eliminar cliente de la empresa.");
        Console.WriteLine("Presione 4 para Dada un área determinada imprimir el nombre de los técnicos asignados a la misma");
        Console.WriteLine("Presione 5 para Listado de clientes");
        Console.WriteLine("Presione 6 para Agregar técnico");
        Console.WriteLine("Presione 7 para Imprimir la facturación de cada cliente en base a su plan");
        Console.WriteLine("Presione 8 para Listado de técnicos");
        Console.WriteLine("Presione 9 para salir");
        Console.WriteLine("-------------------------------");
        valor=int.Parse(Console.ReadLine());
        switch(valor)
            {case 1:
            Console.Clear();
            cosa_telefonia.nuevo_cliente(); //hace el nuevo cliente y luego invoca a otro metodo el cual pasa la informacion a telefonia 
            cosa_cliente.pasar_cliente_a_combos(); 
            cosa_combos.pasar_tele();
            cosa_telefonia.agregar_cliente_asignar_tecnico();
            break;
            case 2:
            cosa_telefonia.cambiar_minutos_consumidos(); //modificar minutos consumidos y esta relacionado con la oferta
            break;
            case 3:
            cosa_telefonia.eliminar_cliente(); //eliminar cliente
            break;
            case 4:
            cosa_telefonia.listaTecnicosArea(); //lista de tecnicos que hay en un area
            break;
            case 5:
            Console.Clear();
            cosa_telefonia.listaClientes();
            break;
            case 6:
            Console.Clear();
            cosa_telefonia.nuevo_tecnico();
            break;
            case 7:
            //cosa_telefonia.facturacion();
            break;
            case 8:
            Console.Clear();
            cosa_telefonia.listaTecnicos(); //un metodo que muestre el nombre del tecnico y la zona que opera
            break;
                     case 9:
                     Console.Clear();
                     Console.WriteLine("saliendo del sistema...");
                     break;
                     default:
                     Console.Clear();
                     Console.WriteLine("La opcion ingresada es inexistente, por favor trate de nuevo."+" "+"Espere a que reaparezca el menu.");
                     Thread.Sleep(2000);
                     Console.Clear();
                     Thread.Sleep(2000);
                     break;
                 }
             }
             while(valor != 9);
         }
     }
     public class el_cliente //clase cliente terminada :3
     {//atributos
         private string nombre; //posicion 0
         private string apellido; //posicion 1
         private int DNI; //posicion 2
         private DateTime dia_inscripcion; //posicion 3
         private string plan_elegido; //posicion 4
         private string area_reside; //posicion 5
         private int numero_cliente = 0; //posicion 6
         private double fact = 0; //posicion 7
         
         public el_cliente(int numero_cliente,string nombre, string apellido, int DNI, DateTime dia_inscripcion,string plan_elegido,string area_reside){
                 this.nombre=nombre;
                 this.apellido=apellido;
                 this.DNI=DNI;
                 this.dia_inscripcion=dia_inscripcion;
                 this.plan_elegido=plan_elegido;
                 this.area_reside=area_reside;
                 this.numero_cliente=numero_cliente;
                 this.fact=fact;
         }
         //metodos
         
         public void pasar_cliente_a_combos() //le pasa las variables a combo
         {combos algito = new combos(nombre,apellido,DNI,dia_inscripcion,plan_elegido,area_reside,numero_cliente,fact);
             algito.verificar_combo(); 
             algito.pasar_tele();
         }
         public override string ToString()
                 {return string.Format("[Nombre={0}, Apellido={1}, DNI={2}, Dia_inscripcion={3}, Plan_elegido={4}, Area_reside={5}, Numero_cliente={6}, Fact={7}]", nombre, apellido, DNI, dia_inscripcion, plan_elegido, area_reside, numero_cliente, fact);
         }
     }
     public class tecnico 
     {     //atributos
         private string nomb;
         private string apelli;
         private string area_trabaja;
  
         //metodos
         public tecnico(string nomb, string apelli,string area_trabaja)
         {
                 this.nomb=nomb;
                 this.apelli=apelli;
                 this.area_trabaja=area_trabaja;
         }
         public override string ToString()
         {
         return string.Format("[tecnico Nomb={0}, Apelli={1}, Area_trabaja={2}]", nomb, apelli, area_trabaja);
         }
     }
     public class combos //clase combo terminada :3
     {//atributos de la clase combo
         private DateTime oferta_tiempo = new DateTime(2022/12/31); //fecha limite de la oferta
         protected int cupos_maximos = 120;
         protected int cupos_ocupados = 0;
         //atributos del cliente
         private string nom; //el constructor les asigna su valor
         private string ape; //el constructor les asigna su valor
         private int dni; //el constructor les asigna su valor
         private DateTime inscri;  //el constructor les asigna su valor
         private string plan; //el constructor les asigna su valor
         private string are; //el constructor les asigna su valor
         private int num; //el constructor les asigna su valor
         private double factu; //el constructor les asigna su valor
         //atributos del "combo"
         private int minutos_libre;
         private double costo_minutos;
         private double precio_final;
         //constructor
         public combos (){} //por si meten un coso vacio, los estoy viendo eh
         public combos(string nom, string ape, int dni, DateTime inscri, string plan, string are, int num, double factu)
         {this.nom = nom;
             this.ape = ape;
             this.dni = dni;
             this.inscri = inscri;
             this.plan = plan;
             this.are = are;
             this.num = num;
             this.factu = factu;
         }
          //propiedades (get y set) 
         public string Nombre
         {set {nom = value;}get {return nom;}}
         public string Apellido
         {set {ape = value;}get {return ape;}}
         public int Dni
         {set {dni = value;}get {return dni;}}
         public DateTime Dia_Inscripcion
         {set {inscri = value;}get {return inscri;}}
         public string Plan_ele
         {set {plan = value;}get {return plan;}}
         public string Area
         {set {are = value;}get {return are;}}
         public int Numero_cli
         {set {num = value;}get {return num;}}
         public        double Facturacion
         {set {factu = value;}get {return factu;}}
         //metodos
         public void verificar_combo()
         {if (plan == "1")
             {combo1();
                 }
             if (plan == "2")
             {combo2();
             }
             if (plan == "3")
             {combo3();
             }
             if (plan == "4")
             {combo4();
             }
         }
         protected void promocion()
         {if (inscri < oferta_tiempo)
             {if (cupos_ocupados < cupos_maximos) // aca hacemos el try y el catch y despues el hacemos el throw de "cupos insufisientes"
                 {Console.WriteLine("usted cumple con los requisitos recibir el pack futbol y el de Disney ademas del combo sin un cargo adicional, felicidades!");
                         }
             }else //si ninguna de las dos condiciones se cumplen hay que preguntar si quiere suscribirse igual
             {string confirmacion;
                 Console.WriteLine("usted no cumple con los requisitos recibir el pack futbol y el de Disney.");
                 Console.WriteLine("¿quiere suscribirse a este combo de todas formas? Ponga si o no respectivamente: ");
                 confirmacion = Console.ReadLine();
                 switch (confirmacion) 
                 {case "si": 
                         Console.WriteLine("usted se anoto en el combo, felicidades!"); //que miseria
                 break;
                case "no":
                     Console.WriteLine("a mamarla");//que quere que haga pibe
                 break;
                    default:
                     Console.WriteLine("la palabra ingresada no corresponde, por favor intente de nuevo: "); //tremendo dolape
                     confirmacion = Console.ReadLine();break;
                 }
             }
         }
         public void oferta(double consumido_pasador_por_cliente) // la oferta se hace cuando se modifican los minutos consumidos
         {if (consumido_pasador_por_cliente < minutos_libre*0.15)
             {factu = factu * 0.85;Console.WriteLine("su precio con el descuento es {0}",precio_final);
                 }
         }
         public void combo1() 
         {//asignacion
             minutos_libre=150;
             costo_minutos=5;
             factu = minutos_libre * costo_minutos;
             promocion();
         }
         public void combo2() 
         {//asignacion
             minutos_libre=300;
             costo_minutos=4;
             factu = minutos_libre * costo_minutos;
             promocion();
         }
         public void combo3() 
         {//asignacion
             minutos_libre=150;
             costo_minutos=3; 
             factu = minutos_libre * costo_minutos;
             promocion();
         }
         public void combo4() 
         {//asignacion
             minutos_libre=500;
             costo_minutos=2; 
             factu = minutos_libre * costo_minutos;
             promocion();
         }
         public void pasar_tele()
         {telefonia cosa_telefonia1 = new telefonia(nom,ape,dni,inscri,plan,are,num,factu);
         }
     }
     public class telefonia //faltan los metodos >:c
     {//atributos de telefonia
         private ArrayList clientes = new ArrayList();
         private ArrayList tecnicos = new ArrayList();

         //atributos del tecnico
         private string nombre_tecnico;
         private string apellido_tecnico;
         private string area_tecnico;
         //atributos del cliente
         private string nombre_cliente;
         private string apellido_cliente;
         private int dni_cliente;
         private DateTime inscripcion_cliente;
         private string plan_cliente;
         private string area_cliente;
         private int numero_cliente;
         private double facturacion_cliente;
         
         //constructores
         public telefonia(){} 
         public telefonia(string tec_nom, string tec_ape, string tec_area) //este constructor es para recibir al tecnico
         {this.nombre_tecnico = tec_nom;
             this.apellido_tecnico = tec_ape;
             this.area_tecnico = tec_area;
         }
         public telefonia(string cli_nom,string cli_ape,int cli_dni, DateTime cli_ins, string cli_pla,string cli_are,int cli_num,double cli_fac) //este constructor es para recibir al cliente que viene de combo, jaja re loco
         {this.nombre_cliente = cli_nom;
             this.apellido_cliente = cli_ape;
             this.dni_cliente = cli_dni;
             this.inscripcion_cliente = cli_ins;
             this.plan_cliente = cli_pla;
             this.area_cliente = cli_are;
             this.numero_cliente = cli_num;
             this.facturacion_cliente = cli_fac;
         }
         //propiedades (get y set de tecnico)
         public string Nombre_tecnico
         {set {nombre_tecnico = value;}get {return nombre_tecnico;}}
         public string Apellido_tecnico
         {set {apellido_tecnico = value;}get {return apellido_tecnico;}}
         public string Area_tecnico
         {set {area_tecnico = value;}get {return area_tecnico;}}
         //propiedades (get y set de cliente)
         public string Nombre_cliente
         {set {nombre_cliente = value;}get {return nombre_cliente;}}
         public string Apellido_cliente
         {set {apellido_cliente = value;}get {return apellido_cliente;}}
         public int Dni_cliente
         {set {dni_cliente = value;}get {return dni_cliente;}}
         public DateTime Inscripcion_cliente
         {set {inscripcion_cliente = value;}get {return inscripcion_cliente;}}
         public string Plan_cliente
         {set {plan_cliente = value;}get {return plan_cliente;}}
         public string Area_cliente
         {set {area_cliente = value;}get {return area_cliente;}}
         public int Numero_cliente
         {set {numero_cliente = value;}get {return numero_cliente;}}
         public double Facturacion_cliente
         {set {facturacion_cliente = value;}get {return facturacion_cliente;}}
         
         //metodos
         public void nuevo_cliente() //modifica las variables
         {   Console.WriteLine("ingrese su nombre: "); //posicion 0
             string nombre = Console.ReadLine();
             Console.WriteLine("ingrese su apellido: "); //posicion 1
             string apellido = Console.ReadLine();
             Console.WriteLine("ingrese su DNI: "); //posicion 2
             int DNI = int.Parse(Console.ReadLine());
             DateTime dia_inscripcion = DateTime.Now; //posicion 3
             Console.WriteLine("ingrese el plan que desea: "); //posicion 4
             string plan_elegido = Console.ReadLine();
             Console.WriteLine("ingrese el area en el que reside teniendo en cuenta lo siguiente: "); //posicion 5
             Console.WriteLine("1-Florencio Varela");
             Console.WriteLine("2-Berazategi");
             Console.WriteLine("3-Quilmes");
             Console.WriteLine("4-Miamiiiii");
             int a = int.Parse(Console.ReadLine());
             string area_reside="";
             switch (a) 
             {
                 case 1 :
                area_reside = "Florencio varela";
                break;
                 case 2 : 
                area_reside = "Berazategi";
                break;
                 case 3 : 
                area_reside = "Quilmes";
                 break;
                 case 4: 
                 area_reside = "Miamiiiii";
                break;
                default:
                Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                a = int.Parse(Console.ReadLine());
                break;
             }
             numero_cliente++; 
             Console.WriteLine("su numero de cliente sera: {0}",numero_cliente);
             el_cliente cliente=new el_cliente(numero_cliente,nombre,apellido,DNI,dia_inscripcion,plan_elegido,area_reside);
             clientes.Add(cliente);
         }
         
         
         public void nuevo_tecnico()
         {        Console.WriteLine("ingrese su nombre: "); //posicion 0
                  string nomb = Console.ReadLine();
                  Console.WriteLine("ingrese su apellido: "); //posicion 1
                  string apelli = Console.ReadLine();
                  Console.WriteLine("ingrese su area a trabajar teniendo en cuenta lo siguiente:"); //posicion 2
             Console.WriteLine("1-Florencio Varela");
             Console.WriteLine("2-Berazategi");
             Console.WriteLine("3-Quilmes");
             Console.WriteLine("4-Miamiiiii");
             int b = int.Parse(Console.ReadLine());
             string area_trabaja="";
             if (b == 1) {area_trabaja = "Florencio varela";}
             if (b == 2) {area_trabaja = "Berazategi";}
             if (b == 3) {area_trabaja = "Quilmes";}
             if (b == 4) {area_trabaja = "Miamiiiii";}
             else
             {Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                 b = int.Parse(Console.ReadLine());
             }
             tecnico tec=new tecnico(nomb,apelli,area_trabaja);
             tecnicos.Add(tec);
         }
         //public void facturacion()
         //{
             //Console.WriteLine("ingrese el nonmbre del cliente del cual quiera saber su facturacion: ");
             //string nom_qui = Console.ReadLine();
             //foreach (cliente l in clientes){
                 //if (l[0] == nom_qui){
                     //Console.WriteLine("aca va la facturacion");
                 //}
             //}
         //}
         //public void cambiar_minutos_consumidos()
         //
             //Console.WriteLine("ingrese el nombre de la persona :");
             //string nom_p = Console.ReadLine();
             //Console.WriteLine("ingrese los minutos consumidos: ");
             //int minu_consu = int.Parse(Console.ReadLine);
             
         //}
         public void listaClientes()
         {foreach (el_cliente tumama in clientes) {
                 Console.WriteLine(tumama.ToString()); //jaja otra linea
                 }
                 
         }
         public void listaTecnicos()
         {foreach (tecnico tuvieja in tecnicos) {
                 Console.WriteLine(tuvieja.ToString()); //jaja otra linea
                 }
         }
         public void listaTecnicosArea()
         {ArrayList tec_area_mostrar = new ArrayList();
             string el_area;
             Console.WriteLine("elija el area que desea saber donde trabajan los tecnicos:");
             Console.WriteLine("1-Florencio Varela");
             Console.WriteLine("2-Berazategi");
             Console.WriteLine("3-Quilmes");
             Console.WriteLine("4-Miamiiiii");
             int n = int.Parse(Console.ReadLine());
             if (n == 1) 
             {el_area = "Florencio Varela";
                 foreach (string[] p in tecnicos)
                 {if (p[2] == el_area)
                     {tec_area_mostrar.Add(p);
                     }
                 }
                 Console.WriteLine(tec_area_mostrar);
                 tec_area_mostrar.Clear();
             }
            if (n == 2)
            {el_area = "Berazategi";
                foreach (string[] t in tecnicos)
                {if (t[2] == el_area)
                    {tec_area_mostrar.Add(t);}
                }
                Console.WriteLine(tec_area_mostrar);
                tec_area_mostrar.Clear();
            }
            if (n == 3) 
            {el_area = "Quilmes";
                foreach (string[] r in tecnicos)
                {if (r[2] == el_area)
                    {tec_area_mostrar.Add(r);}
                }
                Console.WriteLine(tec_area_mostrar);
                tec_area_mostrar.Clear();
            }
            if (n == 4)
            {el_area = "Miamiiiii";
                foreach (string[] i in tecnicos)
                {if (i[2] == el_area)
                    {tec_area_mostrar.Add(i);
                    }
                }
                Console.WriteLine(tec_area_mostrar);
                tec_area_mostrar.Clear();
            }
            else
            {Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                 n = int.Parse(Console.ReadLine());
            }
        }
         public void eliminar_cliente()
        {Console.WriteLine("Ingrese el nombre del usuario que quiera eliminar: ");
             string elimi_nom = Console.ReadLine();
             Console.WriteLine("Ingrese el dni del usuario que quiera eliminar: ");
             string elimi_dni = Console.ReadLine();
             bool elimi = false;
             while (elimi == false)
             {foreach (string[] o in clientes) //no creo que este bien esto
                {if ((o[0] == elimi_nom) && (o[2] == elimi_dni))
                    {clientes.Remove(o); //lo escribi mal, no me acorde como se hace
                        elimi = true;
                    }
                }
            }
        }
    }
}
