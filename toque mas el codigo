using System;
using System.Collections;
using System.Runtime;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
 
namespace trabajo_practico
{
    class Program //es el program pibe
    {
        public static void Main(string[] args)
        {
            menu();
            Console.ReadKey(true);
        }
        public static void menu()
        {         
            telefonia cosa_telefonia = new telefonia();
            //tecnico cosa_tecnico = new tecnico();
            combos cosa_combos = new combos();
            int valor;
            do
            {
                Console.WriteLine("-------------------------------");
                Console.WriteLine("Presione 1 para agregar cliente ");
                Console.WriteLine("Presione 2 para Modificar la cantidad de minutos consumidos por un cliente dado");
                Console.WriteLine("Presione 3 para Eliminar cliente de la empresa.");
                Console.WriteLine("Presione 4 para Dada un área determinada imprimir el nombre de los técnicos asignados a la misma");
                Console.WriteLine("Presione 5 para Listado de clientes");
                Console.WriteLine("Presione 6 para Agregar técnico");
                Console.WriteLine("Presione 7 para Imprimir la facturación de cada cliente en base a su plan");
                Console.WriteLine("Presione 8 para Listado de técnicos");
                Console.WriteLine("Presione 9 para salir");
                Console.WriteLine("-------------------------------");
                valor=int.Parse(Console.ReadLine());
                switch(valor)
                {
                    case 1:
                    Console.Clear();
                    cosa_telefonia.nuevo_cliente(); //hace el nuevo cliente y luego invoca a otro metodo el cual pasa la informacion a telefonia 
                    //cosa_cliente.pasar_cliente_a_combos(); 
                    cosa_combos.pasar_tele();
                    //cosa_telefonia.agregar_cliente_asignar_tecnico();
                    break;
    
                    case 2:
                    //cosa_telefonia.cambiar_minutos_consumidos(); //modificar minutos consumidos y esta relacionado con la oferta
                    break;

                    case 3:
                    cosa_telefonia.eliminar_cliente(); 
                    break;

                    case 4:
                    cosa_telefonia.listaTecnicosArea(); //lista de tecnicos que hay en un area
                    break;

                    case 5:
                    Console.Clear();
                    cosa_telefonia.listaClientes();
                    break;
    
                    case 6:
                    Console.Clear();
                    cosa_telefonia.nuevo_tecnico();
                    break;

                    case 7:
                    //cosa_telefonia.facturacion();
                    break;

                    case 8:
                    Console.Clear();
                    cosa_telefonia.listaTecnicos(); //un metodo que muestre el nombre del tecnico y la zona que opera
                    break;

                    case 9:
                    Console.Clear();
                    Console.WriteLine("saliendo del sistema...");
                    break;

                    default:
                    Console.Clear();
                    Console.WriteLine("La opcion ingresada es inexistente, por favor trate de nuevo."+" "+"Espere a que reaparezca el menu.");
                    Thread.Sleep(1000);
                    Console.Clear();
                    break;
                }
            }
            while(valor != 9);
        }
    }
    public class el_cliente //clase cliente terminada :3
    {
        //atributos
        private string nombre; //posicion 0
        private string apellido; //posicion 1
        private int DNI; //posicion 2
        private DateTime dia_inscripcion; //posicion 3
        private string plan_elegido; //posicion 4
        private string area_reside; //posicion 5
        private int numero_cliente = 0; //posicion 6
        private double fact = 0; //posicion 7
         
        public el_cliente(int numero_cliente,string nombre, string apellido, int DNI, DateTime dia_inscripcion,string plan_elegido,string area_reside, double fact)
        {
            this.nombre=nombre;
            this.apellido=apellido;
            this.DNI=DNI;
            this.dia_inscripcion=dia_inscripcion;
            this.plan_elegido=plan_elegido;
            this.area_reside=area_reside;
            this.numero_cliente=numero_cliente;
            this.fact=fact;
        }
        
        //metodos
        public void pasar_cliente_a_combos() //le pasa las variables a combo
        {
            combos algito = new combos(nombre,apellido,DNI,dia_inscripcion,plan_elegido,area_reside,numero_cliente,fact);
            algito.verificar_combo(); 
            algito.pasar_tele();
        }
        public override string ToString()
        {
            return string.Format("[Nombre={0}, Apellido={1}, DNI={2}, Dia_inscripcion={3}, Plan_elegido={4}, Area_reside={5}, Numero_cliente={6}, Fact={7}]", nombre, apellido, DNI, dia_inscripcion, plan_elegido, area_reside, numero_cliente, fact);
        }
    }
    public class tecnico 
    {     
        //atributos
        private string nomb;
        private string apelli;
        private string area_trabaja;
        
        //metodos
        public tecnico(string nomb, string apelli,string area_trabaja)
        {
            this.nomb=nomb;
            this.apelli=apelli;
            this.area_trabaja=area_trabaja;
        }
        public override string ToString()
        {
            return string.Format("[tecnico Nomb={0}, Apelli={1}, Area_trabaja={2}]", nomb, apelli, area_trabaja);
        }
    }
    public class combos //clase combo terminada :3
    {
        //atributos de la clase combo
        private DateTime oferta_tiempo = new DateTime(2022/12/31); //fecha limite de la oferta
        protected int cupos_maximos = 120;
        protected int cupos_ocupados = 0;

        //atributos del cliente
        private string nom; //el constructor les asigna su valor
        private string ape; //el constructor les asigna su valor
        private int dni; //el constructor les asigna su valor
        private DateTime inscri;  //el constructor les asigna su valor
        private string plan; //el constructor les asigna su valor
        private string are; //el constructor les asigna su valor
        private int num; //el constructor les asigna su valor
        private double factu; //el constructor les asigna su valor

        //atributos del "combo"
        private int minutos_libre;
        private double costo_minutos;
        private double precio_final;

        //constructor
        public combos (){} //por si meten un coso vacio, los estoy viendo eh
        public combos(string nom, string ape, int dni, DateTime inscri, string plan, string are, int num, double factu)
        {
            this.nom = nom;
            this.ape = ape;
            this.dni = dni;
            this.inscri = inscri;
            this.plan = plan;
            this.are = are;
            this.num = num;
            this.factu = factu;
        }

        //propiedades (get y set) 
        public string Nombre
        {set {nom = value;}get {return nom;}}
        public string Apellido
        {set {ape = value;}get {return ape;}}
        public int Dni
        {set {dni = value;}get {return dni;}}
        public DateTime Dia_Inscripcion
        {set {inscri = value;}get {return inscri;}}
        public string Plan_ele
        {set {plan = value;}get {return plan;}}
        public string Area
        {set {are = value;}get {return are;}}
        public int Numero_cli
        {set {num = value;}get {return num;}}
        public double Facturacion
        {set {factu = value;}get {return factu;}}

        //metodos
        public void verificar_combo()
        {
            if (plan == "1")
            {
                combo1();
            }
            if (plan == "2")
            {
                combo2();
            }
            if (plan == "3")
            {
                combo3();
            }
            if (plan == "4")
            {
                combo4();
            }
        }
        protected void promocion()
        {
            if (inscri < oferta_tiempo)
            {
                if (cupos_ocupados < cupos_maximos) // aca hacemos el try y el catch y despues el hacemos el throw de "cupos insufisientes"
                {
                    Console.WriteLine("usted cumple con los requisitos recibir el pack futbol y el de Disney ademas del combo sin un cargo adicional, felicidades!");
                }
            }
            else //si alguna de las dos condiciones no se cumple, hay que preguntar si quiere suscribirse igual
            {
                string confirmacion;
                Console.WriteLine("usted no cumple con los requisitos recibir el pack futbol y el de Disney.");
                Console.WriteLine("¿quiere suscribirse a este combo de todas formas? Ponga si o no respectivamente: ");
                confirmacion = Console.ReadLine();
                switch (confirmacion) 
                {
                    case "si": 
                    Console.WriteLine("usted se anoto en el combo, felicidades!");
                    break;

                    case "no":
                    Console.WriteLine("a mamarla");//que quere que haga pibe
                    break;

                    default:
                    Console.WriteLine("la palabra ingresada no corresponde, por favor intente de nuevo: "); //tremendo dolape
                    confirmacion = Console.ReadLine();break;
                }
            }
        }
        public void oferta(double consumido_pasador_por_cliente) // la oferta se hace cuando se modifican los minutos consumidos
        {
            if (consumido_pasador_por_cliente < minutos_libre*0.15)
            {
                factu = factu * 0.85;
                Console.WriteLine("su precio con el descuento es {0}",precio_final);
            }
        }
        public void combo1() 
        {
            //asignacion
            minutos_libre=150;
            costo_minutos=5;
            factu = minutos_libre * costo_minutos;
            promocion();
        }
        public void combo2() 
        {
            //asignacion
            minutos_libre=300;
            costo_minutos=4;
            factu = minutos_libre * costo_minutos;
            promocion();
        }
        public void combo3() 
        {//asignacion
            minutos_libre=150;
            costo_minutos=3; 
            factu = minutos_libre * costo_minutos;
            promocion();
        }
        public void combo4() 
        {
            //asignacion
            minutos_libre=500;
            costo_minutos=2; 
            factu = minutos_libre * costo_minutos;
            promocion();
        }
        public void pasar_tele()
        {
            el_cliente clin1 = new el_cliente(num,nom,ape,dni,inscri,plan,are,factu)
            telefonia cosa_telefonia1 = new telefonia(clin1);
        }
    }
    public class telefonia //faltan los metodos >:c
    {
        //atributos de telefonia
        private ArrayList clientes = new ArrayList();
        private ArrayList tecnicos = new ArrayList();

        //atributos del cliente
        private el_cliente lompez;
         
        //constructores
        public telefonia(){} 
        public telefonia(el_cliente lopez) //este constructor es para recibir al cliente
        {
            this.lompez = lopez;
        }

        //metodos
        public void nuevo_cliente() //comprobar antes de hacer el cliente si hay tecnicos
        {  
            if (tecnicos.count() == 0){
                Console.WriteLine("No podemos inscribirlo ya que no disponemos de tecnicos.");
                break;
            }
            Console.WriteLine("ingrese su nombre: "); //posicion 0
            string nombre = Console.ReadLine();
            Console.WriteLine("ingrese su apellido: "); //posicion 1
            string apellido = Console.ReadLine();
            Console.WriteLine("ingrese su DNI: "); //posicion 2
            int DNI = int.Parse(Console.ReadLine());
            DateTime dia_inscripcion = DateTime.Now; //posicion 3
            Console.WriteLine("ingrese el plan que desea: "); //posicion 4
            string plan_elegido = Console.ReadLine();
            Console.WriteLine("ingrese el area en el que reside teniendo en cuenta lo siguiente: "); //posicion 5
            Console.WriteLine("1-Florencio Varela");
            Console.WriteLine("2-Berazategi");
            Console.WriteLine("3-Quilmes");
            Console.WriteLine("4-Miamiiiii");
            int a = int.Parse(Console.ReadLine());
            string area_reside="";
            switch (a) 
            {
                case 1:
                area_reside = "Florencio varela";
                break;

                case 2: 
                area_reside = "Berazategi";
                break;

                case 3 : 
                area_reside = "Quilmes";
                break;

                case 4: 
                area_reside = "Miamiiiii";
                break;

                default:
                Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                a = int.Parse(Console.ReadLine());
                break;
            }
            numero_cliente++; //posicion 6
            Console.WriteLine("su numero de cliente sera: {0}",numero_cliente);
            double facturation = 0; //posicion 7
            el_cliente clin=new el_cliente(numero_cliente, nombre, apellido, DNI, dia_inscripcion, plan_elegido, area_reside, facturation);
            clin.pasar_cliente_a_combos();
            //antes de agregar debemos hacer un coso para que se le asigne un tecnico
            foreach (tecnico mamahu in tecnicos)
            {
                if ((string)mamahu[area] == (string)lompez[area])
                {
                    lompez.add(mamahu[0]) //agregar al cliente el nombre del tecnico a su cargo
                }
                else //sino, no tenemos que dejar que el cliente se anote
                {
                    string nose = "algo tenemos que hacer"
                }
            }
            clientes.Add(lompez);
        }
        public void nuevo_tecnico()
        {
            Console.WriteLine("ingrese su nombre: "); //posicion 0
            string nomb = Console.ReadLine();
            Console.WriteLine("ingrese su apellido: "); //posicion 1
            string apelli = Console.ReadLine();
            Console.WriteLine("ingrese su area a trabajar teniendo en cuenta lo siguiente:"); //posicion 2
            Console.WriteLine("1-Florencio Varela");
            Console.WriteLine("2-Berazategi");
            Console.WriteLine("3-Quilmes");
            Console.WriteLine("4-Miamiiiii");
            int b = int.Parse(Console.ReadLine());
            string area_trabaja="";
            switch (b) 
            {
                case 1:
                area_trabaja = "Florencio varela";
                break;

                case 2: 
                area_trabaja = "Berazategi";
                break;

                case 3 : 
                area_trabaja = "Quilmes";
                break;

                case 4: 
                area_trabaja = "Miamiiiii";
                break;

                default:
                Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                b = int.Parse(Console.ReadLine());
                break;
            }
            tecnico tec=new tecnico(nomb,apelli,area_trabaja);
            tecnicos.Add(tec);
        }
        public void facturacion()
        {
            Console.WriteLine("ingrese el nonmbre del cliente del cual quiera saber su facturacion: ");
            string nom_qui = Console.ReadLine();
            foreach (cliente l in clientes)
            {
                if (l[0] == nom_qui)
                {
                    Console.WriteLine("La faturacion del cliente es: {0}",l[]);
                }
            }
        }
        public void cambiar_minutos_consumidos()
        {
            Console.WriteLine("ingrese el nombre de la persona :");
            string nom_p = Console.ReadLine();
            Console.WriteLine("ingrese los minutos consumidos: ");
            int minu_consu = int.Parse(Console.ReadLine);
            foreach (cliente k in clientes)
            {
                if (k[taka] == nom_p)
                {
                    k[minutos_consu] = minu_consu;
                    break;
                }
            }
        }
        public void listaClientes()
        {
            foreach (cliente tuse in clientes) 
            {
                Console.WriteLine(tuse.ToString());
            }    
        }
        public void listaTecnicos()
        {
            foreach (tecnico tuvi in tecnicos) 
            {
                Console.WriteLine(tuvi.ToString());
            }
        }
        public void listaTecnicosArea()
        {
            ArrayList tec_area_mostrar = new ArrayList();
            string el_area;
            Console.WriteLine("elija el area que desea saber donde trabajan los tecnicos:");
            Console.WriteLine("1-Florencio Varela");
            Console.WriteLine("2-Berazategi");
            Console.WriteLine("3-Quilmes");
            Console.WriteLine("4-Miamiiiii");
            int n = int.Parse(Console.ReadLine()); //HACER SWICHT
            if (n == 1) 
            {
                el_area = "Florencio Varela";
                foreach (string[] p in tecnicos)
                {
                    if (p[2] == el_area)
                    {
                        tec_area_mostrar.Add(p);
                    }
                }
                Console.WriteLine(tec_area_mostrar);
                tec_area_mostrar.Clear();
            }
            if (n == 2)
            {
                el_area = "Berazategi";
                foreach (string[] t in tecnicos)
                {
                    if (t[2] == el_area)
                    {
                        tec_area_mostrar.Add(t);
                    }
                }
                Console.WriteLine(tec_area_mostrar);
                tec_area_mostrar.Clear();
            }
            if (n == 3) 
            {
                el_area = "Quilmes";
                foreach (string[] r in tecnicos)
                {
                    if (r[2] == el_area)
                    {
                        tec_area_mostrar.Add(r);
                    }
                }
                Console.WriteLine(tec_area_mostrar);
                tec_area_mostrar.Clear();
            }
            if (n == 4)
            {
                el_area = "Miamiiiii";
                foreach (string[] i in tecnicos)
                {
                    if (i[2] == el_area)
                    {
                        tec_area_mostrar.Add(i);
                    }
                }
                Console.WriteLine(tec_area_mostrar);
                tec_area_mostrar.Clear();
            }
            else
            {
                Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                n = int.Parse(Console.ReadLine());
            }
        }
        public void eliminar_cliente()
        {
            Console.WriteLine("Ingrese el nombre del usuario que quiera eliminar: ");
            string elimi_nom = Console.ReadLine();
            Console.WriteLine("Ingrese el dni del usuario que quiera eliminar: ");
            string elimi_dni = Console.ReadLine();
            bool elimi = false;
            while (elimi == false)
            {
                foreach (string[] o in clientes) //no creo que este bien esto
                {
                    if ((o[0] == elimi_nom) && (o[2] == elimi_dni))
                    {
                        clientes.Remove(o); //lo escribi mal, no me acorde como se hace
                        elimi = true;
                    }
                }
            }
        }
    }
}
