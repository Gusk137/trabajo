using System;
using System.Collections;
using System.Runtime;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace trabajo_practico
{
    class Program //es el program pibe
    {
        public static void Main(string[] args)
        {
            menu();
            Console.ReadKey(true);
        }
        public static void menu()
        {
            //el_cliente cosa_cliente = new el_cliente();
            telefonia cosa_telefonia = new telefonia();
            tecnico cosa_tecnico = new tecnico();
            combos cosa_combos = new combos();
            string valor;
            do
            {
                Console.WriteLine("-------------------------------");
                Console.WriteLine("Presione 1 para agregar cliente ");
                Console.WriteLine("Presione 2 para Modificar la cantidad de minutos consumidos por un cliente dado");
                Console.WriteLine("Presione 3 para Eliminar cliente de la empresa.");
                Console.WriteLine("Presione 4 para Dada un área determinada imprimir el nombre de los técnicos asignados a la misma");
                Console.WriteLine("Presione 5 para Listado de clientes");
                Console.WriteLine("Presione 6 para Agregar técnico");
                Console.WriteLine("Presione 7 para Imprimir la facturación de cada cliente en base a su plan");
                Console.WriteLine("Presione 8 para Listado de técnicos");
                Console.WriteLine("Presione 9 para salir");
                Console.WriteLine("-------------------------------");
                valor = Console.ReadLine();
                switch (valor)
                {
                    case "1":
                        Console.Clear();
                        cosa_telefonia.nuevo_cliente();
                        //cosa_cliente.pasar_cliente_a_combos();
                        cosa_combos.pasar_tele();
                        break;

                    case "2":
                        cosa_telefonia.cambiar_minutos_consumidos(); //modificar minutos consumidos y esta relacionado con la oferta
                        break;

                    case "3":
                        cosa_telefonia.eliminar_cliente();
                        break;

                    case "4":
                        cosa_telefonia.listaTecnicosArea(); //lista de tecnicos que hay en un area
                        break;

                    case "5":
                        Console.Clear();
                        cosa_telefonia.listaClientes();
                        break;

                    case "6":
                        Console.Clear();
                        cosa_telefonia.nuevo_tecnico();
                        break;

                    case "7":
                        cosa_telefonia.facturacion();
                        break;

                    case "8":
                        Console.Clear();
                        cosa_telefonia.listaTecnicos(); //un metodo que muestre el nombre del tecnico y la zona que opera
                        break;

                    case "9":
                        Console.Clear();
                        Console.WriteLine("saliendo del sistema...");
                        Thread.Sleep(10000);
                        Console.WriteLine("era broma, de aca no se sale >:D");
                        break;

                    default:
                        Console.Clear();
                        Console.WriteLine("La opcion ingresada es inexistente, por favor trate de nuevo." + " " + "Espere a que reaparezca el menu.");
                        Thread.Sleep(5000);
                        Console.Clear();
                        break;
                }
            }
            while (valor != "9");
        }
    }
    public class el_cliente
    {
        //atributos
        private string nombre; //posicion 0
        private string apellido; //posicion 1
        private int DNI; //posicion 2
        private DateTime dia_inscripcion; //posicion 3
        private string plan_elegido; //posicion 4
        private string area_reside; //posicion 5
        private int numero_cliente = 0; //posicion 6
        private double fact; //posicion 7
        private int minu_consumi = 0; //posicion 8
        private string tecn; //posicion 9

        //constructores
        public el_cliente() { }
        public el_cliente(int numero_cliente, string nombre, string apellido, int DNI, DateTime dia_inscripcion, string plan_elegido, string area_reside, double fact, int minu_consumi, string tecn)
        {
            this.nombre = nombre;
            this.apellido = apellido;
            this.DNI = DNI;
            this.dia_inscripcion = dia_inscripcion;
            this.plan_elegido = plan_elegido;
            this.area_reside = area_reside;
            this.numero_cliente = numero_cliente;
            this.fact = fact;
            this.minu_consumi = minu_consumi;
            this.tecn = tecn;
        }

        //propiedades
        public string nombrecliente { get { return nombre; } set { this.nombre = value; } }
        public string apellidocliente { get { return apellido; } }
        public int dnicliente { get { return DNI; } }
        public DateTime diainscripcion { get { return dia_inscripcion; } }
        public string planelegido { get { return plan_elegido; } }
        public string areareside { get { return area_reside; } }
        public int numerocliente { get { return numero_cliente; } }
        public double facturacioncli { get { return fact; } set { this.facturacioncli = value; } }
        public int minutosconsumidos { get { return minu_consumi; } set { this.minutosconsumidos = value; } }
        public string tecnicocli { get { return tecn; } }

        //metodos
        public void pasar_cliente_a_combos() //le pasa las variables a combo
        {
            combos algito = new combos(nombre, apellido, DNI, dia_inscripcion, plan_elegido, area_reside, numero_cliente, fact, minu_consumi, tecn);
            //algito.verificar_combo();
            algito.pasar_tele();
        }
        public override string ToString()
        {
            return string.Format("[Nombre={0}, Apellido={1}, DNI={2}, Dia_inscripcion={3}, Plan_elegido={4}, Area_reside={5}, Numero_cliente={6}, Fact={7}, Minutos_consumidos={8}]", nombre, apellido, DNI, dia_inscripcion, plan_elegido, area_reside, numero_cliente, fact, minu_consumi);
        }
    }
    public class tecnico
    {
        //atributos
        private string nomb;
        private string apelli;
        private string area_trabaja;

        //constructores
        public tecnico() { }
        public tecnico(string nomb, string apelli, string area_trabaja)
        {
            this.nomb = nomb;
            this.apelli = apelli;
            this.area_trabaja = area_trabaja;
        }
        //propiedades
        public string Nombre { get { return nomb; } }
        public string Apellido { get { return apelli; } }
        public string Area_traba { get { return area_trabaja; } }

        //metodo
        public override string ToString()
        {
            return string.Format("[tecnico Nomb={0}, Apelli={1}, Area_trabaja={2}]", nomb, apelli, area_trabaja);
        }
    }
    public class combos
    {
        //atributos de la clase combo
        //private DateTime oferta_tiempo = new DateTime(2022 / 12 / 31);
        protected int cupos_maximos = 120;
        protected int cupos_ocupados = 0;

        //atributos del cliente
        private string nom;
        private string ape;
        private int dni;
        private DateTime inscri;
        private string plan;
        private string are;
        private int num;
        private double factu;
        private int minu_consumido;
        private string tecnin;

        //atributos del "combo"
        private int minutos_libre;
        private double costo_minutos;

        //constructor
        public combos() { }
        public combos(string nom, string ape, int dni, DateTime inscri, string plan, string are, int num, double factu, int minu_consumido, string tecnin)
        {
            this.nom = nom;
            this.ape = ape;
            this.dni = dni;
            this.inscri = inscri;
            this.plan = plan;
            this.are = are;
            this.num = num;
            this.factu = factu;
            this.minu_consumido = minu_consumido;
            this.tecnin = tecnin;
        }

        //propiedades (get y set) 
        public string Nombre
        {
            set { nom = value; }
            get { return nom; }
        }
        public string Apellido
        {
            set { ape = value; }
            get { return ape; }
        }
        public int Dni
        {
            set { dni = value; }
            get { return dni; }
        }
        public DateTime Dia_Inscripcion
        {
            set { inscri = value; }
            get { return inscri; }
        }
        public string Plan_ele
        {
            set { plan = value; }
            get { return plan; }
        }
        public string Area
        {
            set { are = value; }
            get { return are; }
        }
        public int Numero_cli
        {
            set { num = value; }
            get { return num; }
        }
        public double Facturacion
        {
            set { factu = value; }
            get { return factu; }
        }
        public int Minutos_consumidos
        {
            set { minu_consumido = value; }
            get { return minu_consumido; }
        }

        //metodos
        //public void verificar_combo()
        //{
        //    if (plan == "1")
        //    {
        //        minutos_libre = 150;
        //        costo_minutos = 5;
        //        factu = minutos_libre * costo_minutos;
        //        promocion();
        //    }
        //    if (plan == "2")
        //    {
        //        minutos_libre = 300;
        //        costo_minutos = 4;
        //        factu = minutos_libre * costo_minutos;
        //        promocion();
        //    }
        //    if (plan == "3")
        //    {
        //        minutos_libre = 100;
        //        costo_minutos = 3;
        //        factu = minutos_libre * costo_minutos;
        //        promocion();
        //    }
        //    if (plan == "4")
        //    {
        //        minutos_libre = 500;
        //        costo_minutos = 2;
        //        factu = minutos_libre * costo_minutos;
        //        promocion();
        //    }
        //}
        //public void promocion()
        //{
        //    if (inscri < oferta_tiempo)
        //    {
        //        try
        //        {
        //            if (cupos_ocupados >= cupos_maximos)
        //            {
        //                throw new CupoIn("Cupo insuficiente");
        //            }
        //            if (cupos_ocupados < cupos_maximos)
        //            {
        //                Console.WriteLine("usted cumple con los requisitos recibir el pack futbol y el de Disney ademas del combo sin un cargo adicional, felicidades!");
        //            }
        //        }
        //        catch (CupoIn oscu)
        //        {
        //            Console.WriteLine(oscu.CAUSA);
        //            string confirmacion;
        //            Console.WriteLine("usted no cumple con los requisitos recibir el pack futbol y el de Disney.");
        //            Console.WriteLine("¿quiere suscribirse a este combo de todas formas? Ponga si o no respectivamente: ");
        //            confirmacion = Console.ReadLine();
        //            switch (confirmacion)
        //            {
        //                case "si":
        //                    Console.WriteLine("usted se anoto en el combo, felicidades!");
        //                    break;

        //                case "no":
        //                    Console.WriteLine("usted decidio no anotarse.");
        //                    break;

        //                default:
        //                    Console.WriteLine("la palabra ingresada no corresponde, por favor intente de nuevo: ");
        //                    confirmacion = Console.ReadLine();
        //                    break;
        //            }
        //        }
        //    }
        //    else
        //    {
        //        string confirmacion;
        //        Console.WriteLine("usted no cumple con los requisitos recibir el pack futbol y el de Disney.");
        //        Console.WriteLine("¿quiere suscribirse a este combo de todas formas? Ponga si o no respectivamente: ");
        //        confirmacion = Console.ReadLine();
        //        switch (confirmacion)
        //        {
        //            case "si":
        //                Console.WriteLine("usted se anoto en el combo, felicidades!");
        //                break;

        //            case "no":
        //                Console.WriteLine("usted decidio no anotarse.");
        //                break;

        //            default:
        //                Console.WriteLine("la palabra ingresada no corresponde, por favor intente de nuevo: ");
        //                confirmacion = Console.ReadLine();
        //                break;
        //        }
        //    }
        //}

        public void oferta(double consumido_pasador_por_cliente) // la oferta se hace cuando se modifican los minutos consumidos
        {
            if (consumido_pasador_por_cliente < minutos_libre * 0.15)
            {
                factu = factu * 0.85;
                Console.WriteLine("su precio con el descuento es {0}", factu);
            }
        }
        public void pasar_tele()
        {
            telefonia cosa_telefonia1 = new telefonia(nom, ape, dni, inscri, plan, are, num, factu, minu_consumido, tecnin);
        }
    }
    public class telefonia
    {
        //atributos de telefonia
        private ArrayList clientes = new ArrayList();
        private ArrayList tecnicos = new ArrayList();

        //atributos del cliente
        private string no_cli;
        private string ap_cli;
        private int dni_cli;
        private DateTime ins_cli;
        private string plan_cli;
        private string are_cli;
        private int num_cli;
        private double factu_cli;
        private int minu_consu_cli;
        private string tecnicon;

        //constructores
        public telefonia() { }
        public telefonia(string no_cli, string ap_cli, int dni_cli, DateTime ins_cli, string plan_cli, string are_cli, int num_cli, double factu_cli, int minu_consu_cli, string tecnicon)
        {
            this.no_cli = no_cli;
            this.ap_cli = ap_cli;
            this.dni_cli = dni_cli;
            this.ins_cli = ins_cli;
            this.plan_cli = plan_cli;
            this.are_cli = are_cli;
            this.num_cli = num_cli;
            this.factu_cli = factu_cli;
            this.minu_consu_cli = minu_consu_cli;
            this.tecnicon = tecnicon;
        }

        public void promocion()
        {
            DateTime inscri=DateTime.Now;
            DateTime oferta_tiempo = new DateTime(2022 / 12 / 31);
            int cupos_maximos = 120;
            int cupos_ocupados = 0;
            if (inscri < oferta_tiempo)
            {
                try
                {
                    if (cupos_ocupados >= cupos_maximos)
                    {
                        throw new CupoIn("Cupo insuficiente");
                    }
                    if (cupos_ocupados < cupos_maximos)
                    {
                        Console.WriteLine("usted cumple con los requisitos recibir el pack futbol y el de Disney ademas del combo sin un cargo adicional, felicidades!");
                    }
                }
                catch (CupoIn oscu)
                {
                    Console.WriteLine(oscu.CAUSA);
                    string confirmacion;
                    Console.WriteLine("usted no cumple con los requisitos recibir el pack futbol y el de Disney.");
                    Console.WriteLine("¿quiere suscribirse a este combo de todas formas? Ponga si o no respectivamente: ");
                    confirmacion = Console.ReadLine();
                    switch (confirmacion)
                    {
                        case "si":
                            Console.WriteLine("usted se anoto en el combo, felicidades!");
                            break;

                        case "no":
                            Console.WriteLine("usted decidio no anotarse.");
                            break;

                        default:
                            Console.WriteLine("la palabra ingresada no corresponde, por favor intente de nuevo: ");
                            confirmacion = Console.ReadLine();
                            break;
                    }
                }
            }
            else
            {
                string confirmacion;
                Console.WriteLine("usted no cumple con los requisitos recibir el pack futbol y el de Disney.");
                Console.WriteLine("¿quiere suscribirse a este combo de todas formas? Ponga si o no respectivamente: ");
                confirmacion = Console.ReadLine();
                switch (confirmacion)
                {
                    case "si":
                        Console.WriteLine("usted se anoto en el combo, felicidades!");
                        break;

                    case "no":
                        Console.WriteLine("usted decidio no anotarse.");
                        break;

                    default:
                        Console.WriteLine("la palabra ingresada no corresponde, por favor intente de nuevo: ");
                        confirmacion = Console.ReadLine();
                        break;
                }
            }
        }

        public int verificar_combo(string plan_elegido)
        {
            int minutos_libre;
            int costo_minutos;
            int factu=0;
            if (plan_elegido == "1")
            {
                minutos_libre = 150;
                costo_minutos = 5;
                factu = minutos_libre * costo_minutos;
                promocion();
            }
            if (plan_elegido == "2")
            {
                minutos_libre = 300;
                costo_minutos = 4;
                factu = minutos_libre * costo_minutos;
                promocion();
            }
            if (plan_elegido == "3")
            {
                minutos_libre = 100;
                costo_minutos = 3;
                factu = minutos_libre * costo_minutos;
                promocion();
            }
            if (plan_elegido == "4")
            {
                minutos_libre = 500;
                costo_minutos = 2;
                factu = minutos_libre * costo_minutos;
                promocion();
            }
            return factu;
        }

        //metodos
        public void nuevo_cliente() //comprobar antes de hacer el cliente si hay tecnicos
        {
            if (tecnicos.Count == 0)
            {
                Console.WriteLine("No podemos inscribirlo ya que no disponemos de tecnicos.");
            }
            else
            {
                Console.WriteLine("ingrese su nombre: "); //posicion 0
                string nombre = Console.ReadLine();
                Console.WriteLine("ingrese su apellido: "); //posicion 1
                string apellido = Console.ReadLine();
                Console.WriteLine("ingrese su DNI: "); //posicion 2
                int DNI = int.Parse(Console.ReadLine());
                DateTime dia_inscripcion = DateTime.Now; //posicion 3
                Console.WriteLine("ingrese el plan que desea: "); //posicion 4
                string plan_elegido = Console.ReadLine();
                Console.WriteLine("ingrese el area en el que reside teniendo en cuenta lo siguiente: "); //posicion 5
                Console.WriteLine("1-Florencio Varela");
                Console.WriteLine("2-Berazategi");
                Console.WriteLine("3-Quilmes");
                Console.WriteLine("4-Miamiiiii");
                int a = int.Parse(Console.ReadLine());
                string area_reside = "";
                switch (a)
                {
                    case 1:
                        area_reside = "Florencio varela";
                        break;

                    case 2:
                        area_reside = "Berazategi";
                        break;

                    case 3:
                        area_reside = "Quilmes";
                        break;

                    case 4:
                        area_reside = "Miamiiiii";
                        break;

                    default:
                        Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                        a = int.Parse(Console.ReadLine());
                        break;
                }
                num_cli++; //posicion 6
                Console.WriteLine("su numero de cliente sera: {0}", num_cli);
                int factu = verificar_combo(plan_elegido); //posicion 7
                Console.WriteLine("ingrese sus minutos consumidos: ");
                minu_consu_cli = int.Parse(Console.ReadLine());//posicion 8
                String NombreTecnico = "";

                foreach (tecnico mamahu in tecnicos)
                {
                    if (mamahu.Area_traba == area_reside)
                    {
                        NombreTecnico = mamahu.Area_traba;
                    }
                }
                if (NombreTecnico == "")
                {
                    Console.WriteLine("no se encontro tecnico, no se creara el cliente.");
                    return;
                }
                el_cliente cl = new el_cliente(num_cli, nombre, apellido, DNI, dia_inscripcion, plan_elegido, area_reside, factu, minu_consu_cli, NombreTecnico);
                cl.pasar_cliente_a_combos();
                clientes.Add(cl);
            }
        }
        public void nuevo_tecnico()
        {
            Console.WriteLine("ingrese su nombre: "); //posicion 0
            string nomb = Console.ReadLine();
            Console.WriteLine("ingrese su apellido: "); //posicion 1
            string apelli = Console.ReadLine();
            Console.WriteLine("ingrese su area a trabajar teniendo en cuenta lo siguiente:"); //posicion 2
            Console.WriteLine("1-Florencio Varela");
            Console.WriteLine("2-Berazategi");
            Console.WriteLine("3-Quilmes");
            Console.WriteLine("4-Miamiiiii");
            string b = Console.ReadLine();
            string area_trabaja = "";
            switch (b)
            {
                case "1":
                    area_trabaja = "Florencio varela";
                    break;

                case "2":
                    area_trabaja = "Berazategi";
                    break;

                case "3":
                    area_trabaja = "Quilmes";
                    break;

                case "4":
                    area_trabaja = "Miamiiiii";
                    break;

                default:
                    Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                    b = Console.ReadLine();
                    break;
            }
            tecnico tec = new tecnico(nomb, apelli, area_trabaja);
            tecnicos.Add(tec);
        }
        public void facturacion() //modificar con propiedad get
        {
            Console.WriteLine("ingrese el nonmbre del cliente del cual quiera saber su facturacion: ");
            string nom_qui = Console.ReadLine();
            foreach (el_cliente l in clientes)
            {
                if (l.nombrecliente == nom_qui)
                {
                    Console.WriteLine("La faturacion del cliente es: {0}", l.facturacioncli);
                }
            }
        }
        public void cambiar_minutos_consumidos() //modificar con propiedad get
        {
            Console.WriteLine("ingrese el nombre de la persona :");
            string nom_p = Console.ReadLine();
            Console.WriteLine("ingrese los minutos consumidos: ");
            int minu_consu =int.Parse( Console.ReadLine());
            foreach (el_cliente k in clientes)
            {
                if (k.nombrecliente == nom_p)
                {
                    k.minutosconsumidos = minu_consu;
                    break;
                }
            }
        }
        public void listaClientes()
        {
            foreach (el_cliente tuse in clientes)
            {
                Console.WriteLine(tuse.ToString());
            }
        }
        public void listaTecnicos()
        {
            foreach (tecnico tuvi in tecnicos)
            {
                Console.WriteLine(tuvi.ToString());
            }
        }
        public void listaTecnicosArea() //modificar con propiedad get
        {
            ArrayList tec_area_mostrar = new ArrayList();

            Console.WriteLine("elija el area que desea saber donde trabajan los tecnicos:");
            Console.WriteLine("1-Florencio Varela");
            Console.WriteLine("2-Berazategi");
            Console.WriteLine("3-Quilmes");
            Console.WriteLine("4-Miamiiiii");
            string n = Console.ReadLine();
            string el_area = "";
            switch (n)
            {
                case "1":
                    el_area = "Florencio varela";
                    foreach (string[] p in tecnicos)
                    {
                        if (p[2] == el_area)
                        {
                            tec_area_mostrar.Add(p);
                        }
                    }
                    Console.WriteLine(tec_area_mostrar);
                    tec_area_mostrar.Clear();
                    break;

                case "2":
                    el_area = "Berazategi";
                    foreach (string[] p in tecnicos)
                    {
                        if (p[2] == el_area)
                        {
                            tec_area_mostrar.Add(p);
                        }
                    }
                    Console.WriteLine(tec_area_mostrar);
                    tec_area_mostrar.Clear();
                    break;

                case "3":
                    el_area = "Quilmes";
                    foreach (string[] p in tecnicos)
                    {
                        if (p[2] == el_area)
                        {
                            tec_area_mostrar.Add(p);
                        }
                    }
                    Console.WriteLine(tec_area_mostrar);
                    tec_area_mostrar.Clear();
                    break;

                case "4":
                    el_area = "Miamiiiii";
                    foreach (string[] p in tecnicos)
                    {
                        if (p[2] == el_area)
                        {
                            tec_area_mostrar.Add(p);
                        }
                    }
                    Console.WriteLine(tec_area_mostrar);
                    tec_area_mostrar.Clear();
                    break;

                default:
                    Console.WriteLine("El numero ingresado no coincide con ninguna de las ubicaciones, por favor intente de nuevo: ");
                    n = Console.ReadLine();
                    break;
            }
        }
        public void eliminar_cliente()
        {
            Console.WriteLine("Ingrese el nombre del usuario que quiera eliminar: ");
            string elimi_nom = Console.ReadLine();
            Console.WriteLine("Ingrese el dni del usuario que quiera eliminar: ");
            int elimi_dni = int.Parse(Console.ReadLine());
            bool elimi = false;
            while (elimi == false)
            {
                foreach (el_cliente o in clientes)
                {
                    if ((o.nombrecliente == elimi_nom) && (o.dnicliente == elimi_dni))
                    {
                        clientes.Remove(o);
                        elimi = true;
                    }
                }
            }
        }
    }
    public class CupoIn : Exception
    {
        //atributo
        private string causa;

        //constructor
        public CupoIn(string Ca)
        {
            this.causa = Ca;
        }

        //propiedad
        public string CAUSA
        {
            get { return causa; }
        }
    }
}
