public class Combos{
    private DateTime oferta_tiempo = oferta_tiempo(1/12/2022); //fecha limite de la oferta
    protected DateTime fecha_usuario; //se recibe la fecha que ingresa el usuario para despues comparar
    private int cupos_maximos = 30;
    protected string [] cantidad_canales = new string [121] //la lista con los nombre de los canales
    
    public Combos(){} //constructor
    public Combos(DateTime fecha_usuario){ //constructor
        this.fecha_usuario = fecha_usuario;
    }
    public DateTime FECHA_USUARIO{ //propiedades
        set{ fecha_usuario = valor; }
    }
}

public class combo1 : Combos{
    private int minutos_libre=150;
    private int costo_minutos=3;
    private int precio_final=450;
    private string [] lista_promo = new string [123];
    private DateTime f_u;
    
    public combo1(DateTime fecha_usu) : base(fecha_usu){ //constructor
        f_u = fecha_usu;
    }
    public int promocion(DateTime oferta, DateTime usuario, string [] cantidad_canales){
        if (usuario < oferta) && (cupos_maximos < cupos_maximos++){ //las 2 posibilidades para entrar en la promo
            lista_promo.addrange(cantidad_canales);
            lista_promo.add("pack fútbol","Disney Channel");
            return lista_promo;
        }
    }
    public int oferta(int consumidos, int libres){   
        if (consumidos < libre*0.15){
            precio_final = precio_final * 0.85;
            return precio_final;
        }
    }
public class combo2 : Combos{
    private int minutos_libre=170;
    private int costo_minutos=2;
    private int precio_final=340;
    private string [] lista_promo = new string [123];
    private DateTime f_u;
    
    public combo1(DateTime fecha_usu) : base(fecha_usu){ //constructor
        f_u = fecha_usu;
    }
    public int promocion(DateTime oferta, DateTime usuario, string [] cantidad_canales){
        if (usuario < oferta) && (cupos_maximos < cupos_maximos++){ //las 2 posibilidades para entrar en la promo
            lista_promo.addrange(cantidad_canales);
            lista_promo.add("pack fútbol","Disney Channel");
            return lista_promo;
        }
    }
    public int oferta(int consumidos, int libres){   
        if (consumidos < libre*0.15){
            precio_final = precio_final * 0.85;
            return precio_final;
        }
}
public class combo3 : Combos{
    private int minutos_libre=125;
    private int costo_minutos=4;
    private int precio_final=500;
    private string [] lista_promo = new string [123];
    private DateTime f_u;
    
    public combo1(DateTime fecha_usu) : base(fecha_usu){ //constructor
        f_u = fecha_usu;
    }
    public int promocion(DateTime oferta, DateTime usuario, string [] cantidad_canales){
        if (usuario < oferta) && (cupos_maximos < cupos_maximos++){ //las 2 posibilidades para entrar en la promo
            lista_promo.addrange(cantidad_canales);
            lista_promo.add("pack fútbol","Disney Channel");
            return lista_promo;
        }
    }
    public int oferta(int consumidos, int libres){   
        if (consumidos < libre*0.15){
            precio_final = precio_final * 0.85;
            return precio_final;
        }
}
public class combo4 : Combos{
    private int minutos_libre=200;
    private int costo_minutos=1.5;
    private int precio_final=300;
    private string [] lista_promo = new string [123];
    private DateTime f_u;
    
    public combo1(DateTime fecha_usu) : base(fecha_usu){ //constructor
        f_u = fecha_usu;
    }
    public int promocion(DateTime oferta, DateTime usuario, string [] cantidad_canales){
        if (usuario < oferta) && (cupos_maximos < cupos_maximos++){ //las 2 posibilidades para entrar en la promo
            lista_promo.addrange(cantidad_canales);
            lista_promo.add("pack fútbol","Disney Channel");
            return lista_promo;
        }
    }
    public int oferta(int consumidos, int libres){   
        if (consumidos < libre*0.15){
            precio_final = precio_final * 0.85;
            return precio_final;
        }
}
