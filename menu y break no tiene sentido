using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace trabajo_practico
{
    class Program
    {
        public static void Main(string[] args)
        {
            menu();
            Console.ReadKey(true);
        }
        static void menu() //hacer que el menu redireccione en vez de resolver algo
        {
        	el_cliente cosa_cliente = new el_cliente();
            telefonia cosa_telefonia = new telefonia();
            tecnico cosa_tecnico = new tecnico();
            combos cosa_combos = new combos();
            int valor;
            Console.WriteLine("");
            Console.WriteLine("Presione 1 para agregar cliente ");
            Console.WriteLine("Presione 2 para Modificar la cantidad de minutos consumidos por un cliente dado");
            Console.WriteLine("Presione 3 para Eliminar cliente de la empresa.");
            Console.WriteLine("Presione 4 para Dada un área determinada imprimir el nombre de los técnicos asignados a la misma");
            Console.WriteLine("Presione 5 para Listado de clientes");
            Console.WriteLine("Presione 6 para Agregar técnico");
            Console.WriteLine("Presione 7 para Imprimir la facturación de cada cliente en base a su plan");
            Console.WriteLine("Presione 8 para Listado de técnicos");
            Console.WriteLine("Presione 9 para salir");
            Console.WriteLine("");
            valor=int.Parse(Console.ReadLine());
            while(valor != 9)
            {
                switch(valor){
                    case 1:
                   	cosa_cliente.nuevo_cliente();
                    //cosa_cliente.pasar_tele();
                    //falta verificar si hay cupo suficiente
                    break;
                    case 2:
                    //cosa_telefonia.modificar(); //modificar minutos consumidos y esta relacionado con la oferta
					
                    break;
                    case 3:
                    //cosa_telefonia.eliminar(); //eliminar cliente
                    
                    break;
                    case 4:
                    //cosa_tecnico.mostrar_tec_area(); //lista de tecnicos que hay en un area 
                    
                    break;
                    case 5:
                    //cosa_telefonia.mostrar_clientes();
                    
                    break;
                    case 6:
                    //cosa_tecnico.agregar_tec();
                    
                    break;
                    case 7:
                    //cosa_telefonia.facturación_cliente();
                    
                    break;
                    case 8:
                    //cosa_tecnico.mostrar_tec(); //lista completa de tecnicos
                    
                    break;
                    default:
                    Console.WriteLine("La opcion ingresada es inexistente, por favor trate de nuevo:");
                    valor = int.Parse(Console.ReadLine());
                    break;
                }
            }
            if (valor == 9){
                Console.WriteLine("El programa se cerrara de inmediato...");
            }
            if (valor!=9) {
            	menu();
          
            }
        }
    }
    public class el_cliente{
        //atributos
        private ArrayList un_cliente = new ArrayList();
        private int numero_cliente = 1;
        private double fact = 0;
        //metodos
        public ArrayList nuevo_cliente(){
            Console.WriteLine("ingrese su apellido: "); //posicion 0
            un_cliente.Add(Console.ReadLine());
            Console.WriteLine("ingrese su nombre: "); //posicion 1
            un_cliente.Add(Console.ReadLine());
            Console.WriteLine("ingrese su DNI: "); //posicion 2
            un_cliente.Add(Console.ReadLine());
            Console.WriteLine("ingrese la fecha en que se inscribio de esta forma dd/mm/aaaa: "); //posicion 3
            un_cliente.Add(Console.ReadLine());
            Console.WriteLine("ingrese el plan que desea, poniendo 1, 2, 3 o 4: ");//posicion	4
            int	plan = int.Parse(Console.ReadLine());
            un_cliente.Add(plan);
            Console.WriteLine("ingrese el area en el que reside"); //posicion 5
            un_cliente.Add(Console.ReadLine());
            un_cliente.Add(numero_cliente); //posicion 6
            un_cliente.Add(fact); //posicion 7
            Console.WriteLine("su numero de cliente sera: {0}",numero_cliente);
            numero_cliente++;
            return un_cliente;
        }    
        public void pasar_tele(){ //hay que repensar esto porque en combo pasa algo parecido
            //cosa_telefonia(un_cliente);
            //cosa_telefonia.agregar(); //se agrega el cliente a la lista de clientes
            //un_cliente.Clear(); //se borra la informacion del cliente despues
        
		}
    }
    public class telefonia{
    	//cosones;
    }
    public class tecnico{
    //    cositas;
    }
    public class combos{
        private DateTime oferta_tiempo = new DateTime(31/12/2022); //fecha limite de la oferta
        public ArrayList un_cli = new ArrayList(); //donde se guarda el cliente recibido
        private ArrayList canales = new ArrayList(); //la cantidad de canales que tendra el cliente
        private int cant_canales; //contador de canales para ir agregando
        protected int cupos_maximos = 120;
        protected int cupos_ocupados = 0; //va aumentando a medida que mas gente se suma en el combo plus
        string confirmacion;
        string confi_combo;
        
        private int minutos_libre; //se crean las variables y en los combos se definen sus valores
        private double costo_minutos; //se crean las variables y en los combos se definen sus valores
        private double precio_final; //se crean las variables y en los combos se definen sus valores
        private ArrayList lista_promo = new ArrayList(); //no se que es esto re loco

        //constructor
        public combos(){}
        public combos(ArrayList de_algo){ //cuando se llama a combos con un arraylist se recibe un cliente
            un_cli = de_algo;
        }
        public ArrayList asignacion_cli{
            set{
                un_cli = value;
            }
        }

        //metodos
        public void verificar_combo() //verifica que combo eligio el cliente y lo envia al mismo
        {
        	if ((int)un_cli[4] == 1)
            {
                combo1();
            }
        	if ((int)un_cli[4] == 2)
            {
                combo2();
            }
        	if ((int)un_cli[4] == 3)
            {
                combo3();
            }
            if ((int)un_cli[4] == 4)
            {
                combo4();
            }
        }
        protected ArrayList promocion() //si no me equivoco en promocion se hace la lista de canales, esa lista la tenemos que agregar al cliente despues con un metodo
        {
        	if ((DateTime)un_cli[3] < oferta_tiempo) //primero se verifica si la decha ingresada por el usuario esta en la fecha de oferta
            {
                if (cupos_ocupados < cupos_maximos) //despues se comprueba si hay cupos suficientes, si no los hay mandamos la excepcion y todo continua normal
                {
                    Console.WriteLine("usted cumple con los requisitos recibir el pack futbol y el de Disney sin un cargo extra.");
                    cant_canales = 0;
                    while (canales.Count < 121) //capaz le pifie y capaz se agregen 122 canales, despues que alguienlo verifique xd
                    { 
                        canales.Add(cant_canales); //se agregan los otros 121 canales
                        cant_canales++;
                    } //cuando termina se le agregan los 2 canales del plus haciendo un total de 123 canales
                    canales.Add("pack fútbol");
                    canales.Add("Disney");
                }
            }
            else //si ninguna de las dos condiciones se cumplen hay que preguntar si quiere suscribirse igual
            {
                Console.WriteLine("¿quiere suscribirse a este combo de todas formas? Ponga si o no respectivamente: ");
                confirmacion = Console.ReadLine();
                if (confirmacion == "si")
                {
                    cant_canales = 0;
                    while (canales.Count < 121)
                    { 
                        canales.Add(cant_canales); //se agregan los otros 121 canales
                        cant_canales++;
                    }
                }
                if (confirmacion == "no")
                {
                    Console.WriteLine("¿desea suscribirse a otro combo? Ponga si o no respectivamente: ");
                    confi_combo = Console.ReadLine();
                    if (confi_combo == "si")
                    {
                        Console.WriteLine("ingrese cual de los 4 combos desea: ");
                        un_cli[4] = Console.ReadLine();
                        switch((int)un_cli[4]){
                            case 1:
                            verificar_combo();
                            break;
                            case 2:
                            verificar_combo();
                            break;
                            case 3:
                            verificar_combo();
                            break;
                            case 4:
                            verificar_combo();
                            break;
                            default:
                            Console.WriteLine("el combo ingresado es inexistente, por favor trate de nuevo: ");
                            un_cli[4] = Console.ReadLine();
                            break;
                        }
                    }
                    if (confi_combo == "no")
                    {
                        Console.WriteLine("abueno adios master"); //cambiar esto :) //no
                        un_cli.Clear();
                    }
                    else
                    {
                        Console.WriteLine("la palabra ingresada no corresponde, por favor intente de nuevo: ");
                        confi_combo = Console.ReadLine();
                    }
                }
            }
            return canales; //tiene que devolver un arraylist
        }
        protected void oferta(double consumidos) // la oferta se hace cuando se modifican los minutos consumidos
        {
            if (consumidos < minutos_libre*0.85) //si min consumidos es menor al 85% de min libres se hace la oferta
            {
            	un_cli[7] = (double)un_cli[7] * 0.85; //se aplica un descuento del 15% a la facturacion
            }
        }
        protected void combo1() //se modifica la facturacion del cliente
        {
            //asignacion
            minutos_libre = 150;
            costo_minutos = 3;
            un_cli[7] = minutos_libre * costo_minutos;
            promocion();
            // hay que modificar el metodo "oferta" desde la opcion de modificar minutos consumidos
    	}
        protected void combo2() 
        {
            //asignacion
            minutos_libre=150;
            costo_minutos=3;
            un_cli[7] = minutos_libre * costo_minutos;
            promocion();
            // hay que modificar el metodo "oferta" desde la opcion de modificar minutos consumidos
    	}
        protected void combo3() 
        {
            //asignacion
            minutos_libre=150;
            costo_minutos=3;
            un_cli[7] = minutos_libre * costo_minutos;
            promocion();
            // hay que modificar el metodo "oferta" desde la opcion de modificar minutos consumidos
    	}
        protected void combo4() 
        {
            //asignacion
            minutos_libre=150;
            costo_minutos=3;
            un_cli[7] = minutos_libre * costo_minutos;
            promocion();
            // hay que modificar el metodo "oferta" desde la opcion de modificar minutos consumidos
    	}
    }
    }
